- name: Setup masters
  hosts: k8s_cluster
  become: true
  gather_facts: true
  vars_files:
    - ../vars/kubernetes.yml
  tasks:
    - name: Ensure br_netfilter module is loaded
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: Include geerlingguy.containerd
      ansible.builtin.include_role:
        name: geerlingguy.containerd

    - name: Add Kubernetes repository.
      ansible.builtin.deb822_repository:
        name: kubernetes
        types: deb
        uris: "{{ kubernetes_apt_repository }}"
        suites: /
        signed_by: "{{ kubernetes_apt_signing_key }}/Release.key"
      register: kubernetes_repository

    - name: Update Apt cache.
      ansible.builtin.apt:
        update_cache: true
      when: kubernetes_repository.changed
      changed_when: true

    - name: Add Kubernetes apt preferences file to pin a version.
      ansible.builtin.template:
        src: apt-preferences-kubernetes.j2
        dest: /etc/apt/preferences.d/kubernetes
        mode: "0644"

    - name: Install kubeadm, kubelet, and kubectl
      ansible.builtin.apt:
        name: ['kubeadm', 'kubelet', 'kubectl']
        state: present

- name: Setup first master
  hosts: kubemaster01
  become: true
  gather_facts: true
  vars_files:
    - ../vars/kubernetes.yml
  tasks:
    - name: Check if Kubernetes has already been initialized.
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubernetes_init_stat
    - name: Initialize Kubernetes
      ansible.builtin.command: "kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=192.168.7.240  --apiserver-cert-extra-sans=192.168.7.54,192.168.7.55,192.168.7.56,192.168.7.240 --upload-certs"
      register: init_output
      when: not kubernetes_init_stat.stat.exists
    - name: Ensure .kube directory exists.
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: "0755"
    - name: Symlink the kubectl admin.conf to ~/.kube/conf.
      ansible.builtin.file:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        state: link
        mode: "0644"
    - name: Check if Calico is already installed
      ansible.builtin.shell:
        cmd: set -o pipefail && kubectl get daemonset calico-node -n kube-system --no-headers
        executable: /bin/bash
      register: calico_check
      failed_when: false
      changed_when: false
    - name: Install Calico CNI
      ansible.builtin.shell:
        cmd: set -o pipefail && curl -s https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml | kubectl apply -f -
        executable: /bin/bash
      when: calico_check.rc != 0
      changed_when: calico_check.rc != 0

- name: Setup other masters
  hosts: kube_control_plane
  become: true
  gather_facts: true
  vars_files:
    - ../vars/kubernetes.yml
  tasks:
    - name: Check if Kubernetes has already been initialized.
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubernetes_init_stat
      changed_when: kubernetes_init_stat.rc != 0

    - name: Get certificate key if cluster is already initialized
      ansible.builtin.shell:
        cmd: set -o pipefail && kubeadm init phase upload-certs --upload-certs | grep -v 'upload-certs'
        executable: /bin/bash
      register: cert_key_command
      when: inventory_hostname == groups['kube_control_plane'][0]
      changed_when: cert_key_command.rc != 0

    - name: Get join token if cluster is already initialized
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      when: inventory_hostname == groups['kube_control_plane'][0]
    - name: Set global join command fact
      ansible.builtin.set_fact:
        global_join_command: "{{ join_command.stdout }} --control-plane --certificate-key {{ cert_key_command.stdout }}"
      when: inventory_hostname == groups['kube_control_plane'][0]

    - name: Display join command (if the cluster was already initialized)
      ansible.builtin.debug:
        msg: "{{ hostvars[groups['kube_control_plane'][0]].global_join_command }}"
      when: inventory_hostname == groups['kube_control_plane'][0]
      changed_when: true

    - name: Join masters
      ansible.builtin.command: "{{ hostvars[groups['kube_control_plane'][0]].global_join_command }}"
      register: init_output
      when: (not kubernetes_init_stat.stat.exists) and inventory_hostname != groups['kube_control_plane'][0]

    - name: Ensure .kube directory exists.
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: "0755"
    - name: Symlink the kubectl admin.conf to ~/.kube/conf.
      ansible.builtin.file:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        state: link
        mode: "0644"
    - name: Ensure .kube directory exists.
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        mode: "0755"
    - name: Symlink the kubectl admin.conf to ~/.kube/conf.
      ansible.builtin.file:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        state: link
        mode: "0644"

- name: Setup worker nodes
  hosts: kube_node
  become: true
  gather_facts: true
  vars_files:
    - ../vars/kubernetes.yml
  tasks:
    - name: Get certificate key if cluster is already initialized
      ansible.builtin.shell:
        cmd: set -o pipefail && kubeadm init phase upload-certs --upload-certs | grep -v 'upload-certs'
        executable: /bin/bash
      register: cert_key_command
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      run_once: true
      changed_when: cert_key_command.rc != 0

    - name: Get join token if cluster is already initialized
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      run_once: true
      changed_when: join_command.rc != 0

    - name: Set global join command fact
      ansible.builtin.set_fact:
        global_join_command: "{{ join_command.stdout }} --certificate-key {{ cert_key_command.stdout }}"
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      delegate_facts: true
      run_once: true
      register: set_global_join
      changed_when: set_global_join.rc != 0

    - name: Display join command (if the cluster was already initialized)
      ansible.builtin.debug:
        msg: "{{ hostvars[groups['kube_control_plane'][0]].global_join_command }}"
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      run_once: true
      register: display_command
      changed_when: display_command.rc != 0

    - name: Check if Kubernetes has already been initialized.
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubernetes_init_stat

    - name: Join worker nodes
      ansible.builtin.command: "{{ hostvars[groups['kube_control_plane'][0]].global_join_command }}"
      when: not kubernetes_init_stat.stat.exists
      register: join_worker_nodes
      changed_when: join_worker_nodes.rc != 0
